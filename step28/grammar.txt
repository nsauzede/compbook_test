program           = (typedef | function-definition | global-variable)*
function          = declspec declarator
type-suffix       = "(" func-params
    | "[" num "]" type-suffix
    | "[" array-dimensions
    | epsilon
array-dimensions  = num? "]" type-suffix
func-params       = (param ("," param)*)? ")"
param             = declspec declarator
type-name         = declspec abstract-declarator
abstract-declarator = "*"* ("(" abstract-declarator ")")? type-suffix
declaration       = declspec (declarator ("=" expr)? ("," declarator ("=" expr)?)*)? ";"
declarator        = "*"* ("(" ident ")" | "(" declarator ")" | ident) type-suffix
declspec          = ("void" | "_Bool" | "char" | "short" | "int" | "long"
    | "typedef" | "static"
    | struct-decl | union-decl | typedef-name
    | enum-specifier)+
enum-specifier    = ident? "{" enum-list? "}"
    | ident ("{" enum-list? "}")?
enum-list         = ident ("=" num)? ("," ident ("=" num)?)*
struct-decl       = struct-union-decl
union-decl        = struct-union-decl
struct-union-decl = ident? ("{" struct-members)?
struct-members    = (declspec declarator ("," declarator)* ";")*
stmt              = "return" expr ";"
    | "if" "(" expr ")" stmt ("else" stmt)?
    | "for" "(" expr-stmt expr? ";" expr? ")" stmt
    | "while" "(" expr ")" stmt
    | "goto" ident ";"
    | "break" ";"
    | ident ":" stmt
    | "{" compound-stmt
    | expr-stmt
compound-stmt     = (typedef | declaration | stmt)* "}"
expr-stmt         = expr? ";"
expr              = assign ("," expr)?
assign            = logor (assign-op assign)?
logor             = logand ("||" logand)*
logand            = bitor ("&&" bitor)*
bitor             = bitxor ("|" bitxor)*
bitxor            = bitand ("^" bitand)*
bitand            = equality ("&" equality)*
assign-op         = "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^="
equality          = relational ("==" relational | "!=" relational)*
relational        = add ("<" add | "<=" add | ">" add | ">=" add)*
add               = mul ("+" mul | "-" mul)*
mul               = cast ("*" cast | "/" cast | "%" cast)*
cast              = "(" type-name ")" cast | unary
unary             = ("+" | "-" | "*" | "&" | "!" | "~") cast
    | ("++" | "--") unary
    | postfix
postfix           = primary ("[" expr "]" | "." ident | "->" ident | "++" | "--")*
funcall           = ident "(" (assign ("," assign)*)? ")"
primary           = "(" "{" stmt+ "}" ")"
    | "(" expr ")"
    | "sizeof" "(" type-name ")"
    | "sizeof" unary
    | ident func-args?
    | num
    | '"' str '"'
